// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model untuk pemilik (owner)
model Owner {
  id                String   @id @default(uuid())
  oneSignalPlayerId String?
  name              String
  email             String   @unique
  phoneNumber       String
  password          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Model untuk pelanggan
model Customer {
  id                       String        @id @default(uuid())
  oneSignalPlayerId        String?
  name                     String
  email                    String        @unique
  phoneNumber              String        @unique
  password                 String
  isVerified               Boolean       @default(false)
  isResetPasswordVerified  Boolean       @default(false)
  verificationOtp          String?
  verificationOtpCreatedAt DateTime?
  resetPasswordOtp         String?
  resetOtpCreatedAt        DateTime?
  isManualCustomer         Boolean       @default(false) // BARU: Untuk menandai customer manual
  address                  String? // BARU: Alamat customer
  instagramHandle          String? // BARU: Handle Instagram
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  reservations             Reservation[]
}

// Model untuk staff
model Staff {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  phoneNumber    String
  address        String?
  profilePicture String?
  isActive       Boolean       @default(true) // Status aktif/nonaktif (cuti)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  sessions       Session[] // Sesi yang ditangani oleh staf
  reservations   Reservation[]
}

// Kategori layanan
model ServiceCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]
}

// Layanan yang ditawarkan
model Service {
  id            String          @id @default(uuid())
  name          String
  description   String
  duration      Int // Durasi dalam menit
  imageUrl      String? // URL gambar layanan (disimpan di Cloudinary)
  isActive      Boolean         @default(true) // Status aktif/nonaktif
  categoryId    String
  hasPriceTiers Boolean         @default(false) // Apakah layanan memiliki price tiers berdasarkan umur
  price         Float? // Harga default jika tidak menggunakan price tiers
  minBabyAge    Int? // Umur minimal bayi dalam bulan (jika tidak menggunakan price tiers)
  maxBabyAge    Int? // Umur maksimal bayi dalam bulan (jika tidak menggunakan price tiers)
  category      ServiceCategory @relation(fields: [categoryId], references: [id])
  priceTiers    PriceTier[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  reservations  Reservation[]
  averageRating Float?
}

// Model untuk price tiers berdasarkan umur bayi
model PriceTier {
  id         String   @id @default(uuid())
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  tierName   String // Nama tier, contoh: "Bayi 0-15 bulan", "Balita 2-5 tahun"
  minBabyAge Int // Batas bawah umur dalam bulan
  maxBabyAge Int // Batas atas umur dalam bulan
  price      Float // Harga untuk tier ini
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([serviceId, minBabyAge, maxBabyAge]) // Memastikan tidak ada overlap range umur untuk service yang sama
}

// Jadwal operasional harian (07.00-15.00)
model OperatingSchedule {
  id        String     @id @default(uuid())
  date      DateTime   @unique // Tanggal operasional
  isHoliday Boolean    @default(false) // Apakah hari libur
  notes     String? // Catatan khusus untuk hari tersebut
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  timeSlots TimeSlot[]
}

// Timeslot untuk setiap jam operasional (07.00-15.00, durasi 1 jam)
model TimeSlot {
  id                  String            @id @default(uuid())
  operatingScheduleId String
  operatingSchedule   OperatingSchedule @relation(fields: [operatingScheduleId], references: [id], onDelete: Cascade)
  startTime           DateTime // Waktu mulai (misalnya 07:00)
  endTime             DateTime // Waktu selesai (misalnya 08:00)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  sessions            Session[] // Sesi yang tersedia pada timeslot ini

  @@unique([operatingScheduleId, startTime, endTime]) // Memastikan tidak ada duplikasi timeslot pada jadwal yang sama
}

// Sesi dalam timeslot (berdasarkan jumlah staff aktif)
model Session {
  id          String       @id @default(uuid())
  timeSlotId  String
  timeSlot    TimeSlot     @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  staffId     String
  staff       Staff        @relation(fields: [staffId], references: [id])
  isBooked    Boolean      @default(false) // Status apakah sudah dipesan
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reservation Reservation?
  // satu time slot bisa ada beberapa sesi berdasarkan jumlah staf aktif, jika ada 3 staf aktif, maka ada 3 sesi dalam satu time slot

  @@unique([timeSlotId, staffId]) // Satu staf hanya dapat menangani satu sesi dalam satu timeslot
}

// Rating layanan
model Rating {
  id            String      @id @default(uuid())
  rating        Float // Rating 1-5
  comment       String?
  createdAt     DateTime    @default(now())
  reservationId String      @unique // Memastikan satu reservasi hanya bisa dirating sekali
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

// Status reservasi
enum ReservationStatus {
  PENDING
  CONFIRMED // Setelah pembayaran berhasil
  IN_PROGRESS // Saat layanan sedang dilakukan
  COMPLETED // Setelah layanan selesai
  CANCELLED // Jika reservasi dibatalkan
  EXPIRED // Jika reservasi tidak dibayar dalam batas waktu
}

// Status pembayaran
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
  REFUNDED
}

// Metode pembayaran
enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  QRIS
  E_WALLET
  RETAIL_OUTLET
  CASH
  MANUAL
}

// Tipe reservasi
enum ReservationType {
  ONLINE // Reservasi melalui aplikasi
  MANUAL // Reservasi manual oleh owner
}

// Reservasi
model Reservation {
  id                   String            @id @default(uuid())
  reservationType      ReservationType   @default(ONLINE)
  customerId           String
  customer             Customer          @relation(fields: [customerId], references: [id])
  serviceId            String
  service              Service           @relation(fields: [serviceId], references: [id])
  staffId              String
  staff                Staff             @relation(fields: [staffId], references: [id])
  sessionId            String            @unique
  session              Session           @relation(fields: [sessionId], references: [id])
  notes                String? // Catatan khusus untuk reservasi
  parentNames          String? // NEW: Parent names for manual reservations
  babyName             String
  babyAge              Int // Umur bayi dalam bulan
  priceTierId          String? // ID price tier jika menggunakan layanan dengan price tiers
  totalPrice           Float
  status               ReservationStatus @default(PENDING)
  createdByOwner       Boolean           @default(false) // Apakah dibuat oleh owner (manual)
  rescheduleCount      Int               @default(0)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  payment              Payment?
  rating               Rating?
  ratingToken          String?           @unique // Jadikan opsional
  ratingTokenExpiresAt DateTime? // Tambahkan field ini
}

// Pembayaran
model Payment {
  id                 String        @id @default(uuid())
  reservationId      String        @unique
  reservation        Reservation   @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  amount             Float
  paymentMethod      PaymentMethod
  paymentStatus      PaymentStatus @default(PENDING)
  transactionId      String? // ID transaksi dari Tripay
  tripayToken        String? // Token untuk Tripay
  paymentDate        DateTime?
  notes              String? // Catatan untuk pembayaran 
  expiryDate         DateTime // Batas waktu pembayaran
  paymentProof       String? // URL bukti pembayaran (jika manual)
  tripayPaymentUrl   String? // URL pembayaran dari Tripay
  tripayInstructions Json? // Instruksi pembayaran dari Tripay
  tripayResponse     Json? // Respons lengkap dari Tripay
  merchantFee        Float? // Biaya merchant
  customerFee        Float? // Biaya customer
  qrCodeUrl          String? // URL QR Code
  paymentCodes       Json? // Kode pembayaran (VA Number, dll)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

// Notifikasi
model Notification {
  id            String   @id @default(uuid())
  recipientType String // 'owner' atau 'customer'
  recipientId   String // ID pemilik atau pelanggan
  title         String
  message       String
  isRead        Boolean  @default(false)
  type          String // Tipe notifikasi: reservation, payment, system, etc.
  referenceId   String? // ID referensi jika ada (misalnya reservationId)
  createdAt     DateTime @default(now())
}